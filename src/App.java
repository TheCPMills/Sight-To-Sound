import java.io.*;
import java.util.*;

public class App {
    // milliseconds for a beat
    // int BEAT = 60000 / TEMPO;

    private static final float CROTCHET = 1 / 4.0f;          // quarter note
    private static final float SEMIQUAVER = CROTCHET / 4.0f; // sixteenth note
    private static final float QUAVER = CROTCHET / 2.0f;     // eighth note
    private static final float MINIM = 2 * CROTCHET;         // half note
    private static final float SEMIBREVE = 4 * CROTCHET;     // whole note
    private static final float BREVE = 8 * CROTCHET;         // double note
    private static final float LONGA = 16 * CROTCHET;        // quadruple note

    private static final float TRIPLET = 1 / 3.0f;    // triplet
    private static final float QUINTUPLET = 1 / 5.0f; // quintuplet
    private static final float SEXTUPLET = 1 / 6.0f;  // sextuplet
    private static final float SEPTUPLET = 1 / 7.0f;  // septuplet

    public static void main(String[] args) throws Exception {
        test2();
        test3();
    }

    private static void test2() {
        // Create notes for the melody
        float totalTime = 0;
        LinkedList<Note> melodyNotes = new LinkedList<Note>();

        melodyNotes.add(new Note(totalTime, -1, CROTCHET));
        totalTime += CROTCHET;
        melodyNotes.add(new Note(totalTime, 72, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 78, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 72, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        melodyNotes.add(new Note(totalTime, 70, SEMIQUAVER));
        totalTime += SEMIQUAVER;
        melodyNotes.add(new Note(totalTime, 74, SEMIQUAVER));
        totalTime += SEMIQUAVER;
        melodyNotes.add(new Note(totalTime, 72, CROTCHET));
        totalTime += CROTCHET;
        melodyNotes.add(new Note(totalTime, -1, MINIM));
        totalTime += MINIM;
        melodyNotes.add(new Note(totalTime, 72, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 78, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 78, MINIM));
        totalTime += MINIM;
        melodyNotes.add(new Note(totalTime, 78, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 77, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 75, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 78, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 77, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 75, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, -1, CROTCHET));
        totalTime += CROTCHET;
        melodyNotes.add(new Note(totalTime, 72, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 78, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 72, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        melodyNotes.add(new Note(totalTime, 70, SEMIQUAVER));
        totalTime += SEMIQUAVER;
        melodyNotes.add(new Note(totalTime, 74, SEMIQUAVER));
        totalTime += SEMIQUAVER;
        melodyNotes.add(new Note(totalTime, 72, CROTCHET));
        totalTime += CROTCHET;
        melodyNotes.add(new Note(totalTime, -1, MINIM));
        totalTime += MINIM;
        melodyNotes.add(new Note(totalTime, 72, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 78, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 77, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 75, QUAVER));
        totalTime += QUAVER;
        melodyNotes.add(new Note(totalTime, 78, MINIM));
        totalTime += MINIM;
        melodyNotes.add(new Note(totalTime, 78, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 77, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 75, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 78, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 77, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 75, CROTCHET * TRIPLET));
        totalTime += CROTCHET * TRIPLET;
        melodyNotes.add(new Note(totalTime, 72, SEMIBREVE));
        totalTime += SEMIBREVE;

        Collections.sort(melodyNotes);

        // Create notes for the harmony
        totalTime = 0;
        LinkedList<Note> harmonyNotes = new LinkedList<Note>();

        harmonyNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        harmonyNotes.add(new Note(totalTime, -1, 30, SEMIBREVE + MINIM + QUAVER));
        totalTime += SEMIBREVE + MINIM + QUAVER;
        harmonyNotes.add(new Note(totalTime, 31, 30, QUAVER));
        totalTime += QUAVER;
        harmonyNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        harmonyNotes.add(new Note(totalTime, -1, 30, SEMIBREVE + MINIM));
        totalTime += SEMIBREVE + MINIM;
        harmonyNotes.add(new Note(totalTime, 48, 30, CROTCHET));
        totalTime += CROTCHET;
        harmonyNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        harmonyNotes.add(new Note(totalTime, -1, SEMIBREVE + MINIM + QUAVER));
        totalTime += SEMIBREVE + MINIM + QUAVER;
        harmonyNotes.add(new Note(totalTime, 31, 30, QUAVER));
        totalTime += QUAVER;
        harmonyNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        harmonyNotes.add(new Note(totalTime, -1, SEMIBREVE + MINIM));
        totalTime += SEMIBREVE + MINIM;
        harmonyNotes.add(new Note(totalTime, 48, 30, CROTCHET));
        totalTime += CROTCHET;
        harmonyNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;

        Collections.sort(harmonyNotes);

        // Create notes for the bass
        totalTime = 0;
        LinkedList<Note> bassNotes = new LinkedList<Note>();

        bassNotes.add(new Note(totalTime, -1, SEMIBREVE * 4));
        totalTime += SEMIBREVE * 4;

        bassNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        bassNotes.add(new Note(totalTime, -1, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        bassNotes.add(new Note(totalTime, -1, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, QUAVER + SEMIQUAVER));
        totalTime += QUAVER + SEMIQUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, QUAVER));
        bassNotes.add(new Note(totalTime, 34, 30, SEMIQUAVER));
        totalTime += SEMIQUAVER;
        bassNotes.add(new Note(totalTime, 31, 30, QUAVER));
        totalTime += QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        bassNotes.add(new Note(totalTime, -1, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, CROTCHET));
        totalTime += CROTCHET;
        bassNotes.add(new Note(totalTime, -1, CROTCHET + QUAVER));
        totalTime += CROTCHET + QUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, QUAVER + SEMIQUAVER));
        totalTime += QUAVER + SEMIQUAVER;
        bassNotes.add(new Note(totalTime, 36, 30, QUAVER));
        bassNotes.add(new Note(totalTime, 34, 30, SEMIQUAVER));
        totalTime += SEMIQUAVER;
        bassNotes.add(new Note(totalTime, 31, 30, QUAVER));
        totalTime += QUAVER;
        Collections.sort(bassNotes);

        // Create notes for the drums
        totalTime = 0;
        LinkedList<Note> percussionNotes = new LinkedList<Note>();

        percussionNotes.add(new Note(totalTime, -1, SEMIBREVE * 4));
        totalTime += SEMIBREVE * 4;

        percussionNotes.add(new Note(totalTime, "BASS_DRUM", MINIM));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", CROTCHET + QUAVER));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", MINIM));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER * TRIPLET));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", QUAVER * TRIPLET));
        totalTime += QUAVER * TRIPLET;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER * TRIPLET));
        totalTime += QUAVER * TRIPLET;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER * TRIPLET));
        totalTime += QUAVER * TRIPLET;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "LO_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", QUAVER + SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "LO_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", QUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", MINIM));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", CROTCHET + QUAVER));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER / 6));
        totalTime += QUAVER / 6;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", MINIM));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER * TRIPLET));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", QUAVER * TRIPLET));
        totalTime += QUAVER * TRIPLET;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER * TRIPLET));
        totalTime += QUAVER * TRIPLET;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", QUAVER * TRIPLET));
        totalTime += QUAVER * TRIPLET;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "LO_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "OPEN_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", QUAVER + SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "HI_MID_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "LO_TOM", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", SEMIQUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "SIDE_STICK", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", QUAVER));
        totalTime += SEMIQUAVER;
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIQUAVER));
        percussionNotes.add(new Note(totalTime, "CLOSED_HI_HAT", SEMIBREVE));
        percussionNotes.add(new Note(totalTime, "CRASH_CYMBAL_1", SEMIBREVE));
        percussionNotes.add(new Note(totalTime, "BASS_DRUM", SEMIBREVE));
        totalTime += SEMIBREVE;

        Collections.sort(percussionNotes);

        // Create voices
        Voice melody = new Voice(melodyNotes, 0, 45);
        Voice harmony = new Voice(harmonyNotes, 1, 43);
        Voice bass = new Voice(bassNotes, 2, 38);
        Voice percussion = new Voice(percussionNotes, 9);

        // Create music string
        int tempo = 94;
        String musicString = "TIME:4/4 KEY:Ebmaj T" + tempo;
        musicString += " " + melody.toString();
        musicString += " " + harmony.toString();
        musicString += " " + bass.toString();
        musicString += " " + percussion.toString();

        // Convert music string to MIDI
        TestWithAPI.main(new String[] { musicString });
    }

    private static void test3() {
        float time = 0;
        LinkedList<Note> testNotes = new LinkedList<Note>();

        testNotes.add(new Note(time, 56 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 52 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 56 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 52 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 51 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 49 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 52 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 56 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 54 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 52 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 56 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 59 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 61 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 56 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 52 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 49 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 56 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 54 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 49 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 52 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 49 + 12, CROTCHET));
        testNotes.add(new Note(time, 56 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 49 + 12, CROTCHET + QUAVER));
        testNotes.add(new Note(time, 54 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 56 + 12, QUAVER));
        testNotes.add(new Note(time, 47 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 57 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 56 + 12, QUAVER));
        testNotes.add(new Note(time, 47 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, CROTCHET));
        testNotes.add(new Note(time, 47 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 52 + 12, CROTCHET));
        testNotes.add(new Note(time, 47 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 47 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 56 + 12, QUAVER));
        testNotes.add(new Note(time, 49 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 47 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 49 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 51 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 48 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 51 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 49 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 52 + 12, CROTCHET));
        testNotes.add(new Note(time, 49 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 49 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 54 + 12, CROTCHET));
        testNotes.add(new Note(time, 49 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 52 + 12, QUAVER));
        testNotes.add(new Note(time, 49 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 49 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 49 + 12, CROTCHET + QUAVER));
        testNotes.add(new Note(time, 52 + 12, CROTCHET + QUAVER));
        testNotes.add(new Note(time, 57 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 49 + 12, CROTCHET));
        testNotes.add(new Note(time, 56 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 48 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 48 + 12, QUAVER + SEMIBREVE));
        testNotes.add(new Note(time, 52 + 12, QUAVER + SEMIBREVE));
        testNotes.add(new Note(time, 57 + 12, QUAVER + SEMIBREVE));
        time += QUAVER + SEMIBREVE;

        time = 0;
        Chord chord1 = new Chord(time, 40 + 12, "maj", CROTCHET + QUAVER);
        time += CROTCHET + QUAVER;
        testNotes.addAll(Arrays.asList(chord1.getNotes()));
        Chord chord2 = new Chord(time, 42 + 12, "sus2 /61", MINIM + QUAVER);
        time += MINIM + QUAVER;
        testNotes.addAll(Arrays.asList(chord2.getNotes()));
        Chord chord3 = new Chord(time, 37 + 12, "min add8", CROTCHET + QUAVER);
        time += CROTCHET + QUAVER;
        testNotes.addAll(Arrays.asList(chord3.getNotes()));
        Chord chord4 = new Chord(time, 32 + 12, "dom7 no3", CROTCHET + QUAVER);
        time += CROTCHET + QUAVER;
        testNotes.addAll(Arrays.asList(chord4.getNotes()));
        testNotes.add(new Note(time, 39 + 12, CROTCHET));
        time += CROTCHET;
        Chord chord5 = new Chord(time, 40 + 12, "maj", CROTCHET + QUAVER);
        time += CROTCHET + QUAVER;
        testNotes.addAll(Arrays.asList(chord5.getNotes()));
        Chord chord6 = new Chord(time, 42 + 12, "sus2 /61", MINIM + QUAVER);
        testNotes.addAll(Arrays.asList(chord6.getNotes()));
        time += MINIM + QUAVER;
        testNotes.add(new Note(time, 37 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 44 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 32 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 39 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 33 + 12, MINIM));
        testNotes.add(new Note(time, 45 + 12, MINIM));
        time += MINIM;
        testNotes.add(new Note(time, 45 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 45 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 47 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 35 + 12, MINIM));
        time += MINIM;
        testNotes.add(new Note(time, 42 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 42 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 37 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 44 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 35 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 42 + 12, MINIM + QUAVER));
        time += MINIM + QUAVER;
        testNotes.add(new Note(time, 32 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 33 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 40 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 40 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 40 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 33 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 40 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 45 + 12, CROTCHET + QUAVER));
        time += CROTCHET + QUAVER;
        testNotes.add(new Note(time, 45 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 45 + 12, CROTCHET));
        time += CROTCHET;
        testNotes.add(new Note(time, 33 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 40 + 12, QUAVER));
        time += QUAVER;
        testNotes.add(new Note(time, 45 + 12, CROTCHET + SEMIBREVE));
        time += CROTCHET + SEMIBREVE;

        Voice voice = new Voice(testNotes, 0, 0);

        try {
            PrintWriter writer = new PrintWriter("assets/test3.txt", "UTF-8");
            writer.println("T96 " + voice.toString());
            writer.close();
        } catch (IOException e) {
            System.out.println("Error writing file");
        }
    }
}